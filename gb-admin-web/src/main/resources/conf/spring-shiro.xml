<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xsi:schemaLocation="http://www.springframework.org/schema/beans   
		http://www.springframework.org/schema/beans/spring-beans-3.1.xsd">   
		
		
        
		<!-- 继承自AuthorizingRealm的自定义Realm,即指定Shiro验证用户登录的类为自定义的ShiroDbRealm.java -->  
		<bean id="myRealm" class="com.genebook.admin.utils.MyRealm"/>  
		   
		<!-- Shiro默认会使用Servlet容器的Session,可通过sessionMode属性来指定使用Shiro原生Session -->  
		<!-- 这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替 -->  
<!-- 		<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">  
		    <property name="realm" ref="myRealm"/> 
		    <property name="sessionMode" value="native"/>
		    <property name="sessionManager" ref="shiroSessionManager"/> 
		    <property name="cacheManager" ref="memoryConstrainedCacheManager" /> 
		    <property name="cacheManager" ref="shiroEhcacheManager" /> 
		</bean>  -->

<!-- 		<bean id="shiroSessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">  
		    <property name="sessionDAO" ref="sessionDAO"/>  
		    <property name="deleteInvalidSessions" value="true"/>
		    <property name="sessionValidationInterval" value="600000"/>  相隔多久检查一次session的有效性 10  
		    <property name="globalSessionTimeout" value="1800000"/>  session 有效时间为半小时 （毫秒单位）  
		    <property name="sessionIdCookie.name" value="KPSID"/>  
		</bean>  		
		
		<bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO" />   -->
		
		<!-- <bean id="memoryConstrainedCacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager" />  -->
		
			<!-- 用户授权信息Cache, 采用EhCache  -->
<!-- 		<bean id="shiroEhcacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
			<property name="cacheManagerConfigFile" value="classpath:session-shiro.xml"/>
		</bean> -->
		
		
		<!-- ****************************改用redis后的配置*************************  -->
		<!-- redisSessionDAO -->
		<bean id="redisSessionDAO" class="org.crazycake.shiro.RedisSessionDAO">
		    <property name="redisManager" ref="redisManager" />
		</bean>
		
		<!-- sessionManager -->
		<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		    <property name="sessionDAO" ref="redisSessionDAO" />
		    <property name="sessionIdCookie.name" value="SID"/> 
		</bean>
		
		<!-- shiro redisManager -->
		<bean id="redisManager" class="org.crazycake.shiro.RedisManager">
		    <property name="host" value="${maven.redis.ip}"/>
		    <property name="port" value="${maven.redis.port}"/>
		    <property name="expire" value="1800"/>
		</bean>
		
		<!-- cacheManager -->
		<bean id="cacheManager" class="org.crazycake.shiro.RedisCacheManager">
		    <property name="redisManager" ref="redisManager" />
		</bean>		
		
		<!-- shiro securityManager -->
		<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		
		    <!-- Single realm app.  If you have multiple realms, use the 'realms' property instead. -->
		    <property name="realm" ref="myRealm"/> 
		
		    <!-- sessionManager -->
		    <property name="sessionManager" ref="sessionManager" />
		
		    <!-- cacheManager -->
		    <property name="cacheManager" ref="cacheManager" />
		
		    <!-- By default the servlet container sessions will be used.  Uncomment this line
		         to use shiro's native sessions (see the JavaDoc for more): -->
		    <!-- <property name="sessionMode" value="native"/> -->
		</bean>
		   
		<!-- Shiro主过滤器本身功能十分强大,其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 -->  
		<!-- Web应用中,Shiro可控制的Web请求必须经过Shiro主过滤器的拦截,Shiro对基于Spring的Web应用提供了完美的支持 -->  
		<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">  
		    <!-- Shiro的核心安全接口,这个属性是必须的 -->  
		    <property name="securityManager" ref="securityManager"/>  
		    <!-- 要求登录时的链接(可根据项目的URL进行替换),非必须的属性,默认会自动寻找Web工程根目录下的"/login.jsp"页面 -->  
		    <property name="loginUrl" value="login.html"/>   
		    <!-- 登录成功后要跳转的连接(本例中此属性用不到,因为登录成功后的处理逻辑在LoginAtion里硬编码为main.jsp了) -->  
		    <!-- <property name="successUrl" value="/system/main"/> -->  
		    <!-- 用户访问未对其授权的资源时,所显示的连接 -->  
		    <!-- 若想更明显的测试此属性可以修改它的值,如unauthor.jsp,然后用登录后访问/admin/listUser.jsp就看见浏览器会显示unauthor.jsp -->  
		    <property name="unauthorizedUrl" value="view/error/403.jsp"/>  
		    <!-- Shiro连接约束配置,即过滤链的定义 -->  
		    <!-- 下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的 -->  
		    <!-- anon：它对应的过滤器里面是空的,什么都没做,这里.*表示参数,比方说login.jsp?main这种 -->  
		    <!-- authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter -->  
		    <!-- /xxx**=authc,roles[管理员] -->
		    <property name="filterChainDefinitions">  
		        <value>
		        	/login.html=anon
		        	/** = anon
		        </value>  
		    </property>
		</bean>  
		   
		<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->  
		<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

		<!-- 使用shiro的注解方式 -->
		<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">  
	         <property name="proxyTargetClass" value="true" />   
	    </bean>
		<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">  
	        <property name="securityManager" ref="securityManager"/>  
	    </bean>  
</beans>